version: '3.8'

services:
  kong-db:
    image: postgres:13
    container_name: kong-db
    restart: always
    networks:
      - kong-cluster-net
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: kong
      POSTGRES_DB: kong
    volumes:
      - ./kong-data:/var/lib/postgresql/data

  kong-bootstrap:
    image: kong:3.4.1
    depends_on:
      - kong-db
    networks:
      - kong-cluster-net
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-db
      KONG_PG_PASSWORD: kong
    command: kong migrations bootstrap
    restart: on-failure

  kong-node1:
    image: kong:3.4.1
    container_name: kong-node1
    depends_on:
      - kong-bootstrap
    networks:
      - kong-cluster-net
    ports:
      - "8000:8000"
      - "8001:8001"
      - "8002:8002"  # 添加 Kong Manager 端口映射
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-db
      KONG_PG_PASSWORD: kong
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_LISTEN: 0.0.0.0:8000
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_STATUS_LISTEN: 0.0.0.0:8100
      KONG_PROMETHEUS_ENABLED: "on"
      KONG_PLUGINS: bundled,kong_sliding_window_rate_limiter  # 启用插件
    restart: always

  kong-node2:
    image: kong:3.4.1
    container_name: kong-node2
    depends_on:
      - kong-bootstrap
    networks:
      - kong-cluster-net
    ports:
      - "8010:8000"
      - "8011:8001"
      - "8012:8002"  # 添加 Kong Manager 端口映射
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-db
      KONG_PG_PASSWORD: kong
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_LISTEN: 0.0.0.0:8000
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_STATUS_LISTEN: 0.0.0.0:8110
      KONG_PROMETHEUS_ENABLED: "on"
      KONG_PLUGINS: bundled,kong_sliding_window_rate_limiter  # 启用插件
    restart: always

  kong-init:
    image: curlimages/curl:latest
    depends_on:
      - kong-node1
      - grafana
    networks:
      - kong-cluster-net
    volumes:
      - ./grafana/kong_dashboard.json:/dashboards/kong_dashboard.json
    entrypoint: ["sh", "-c"]
    command: |
      "echo '[INFO] 初始化 Kong 插件和监控面板...'; \
      sleep 10; \
      curl -s -X POST http://kong-node1:8001/plugins --data name=prometheus; \
      curl -s -X POST http://kong-node1:8001/plugins --data name=rate-limiting --data config.second=100 --data config.policy=local; \
      TOKEN=$(curl -s -X POST http://grafana:3000/api/auth/keys -u admin:admin -H 'Content-Type: application/json' -d '{\"name\":\"init\",\"role\":\"Admin\"}' | grep '\"key\"' | cut -d '\"' -f4); \
      curl -s -X POST http://grafana:3000/api/dashboards/db -H \"Authorization: Bearer $TOKEN\" -H \"Content-Type: application/json\" -d @/dashboards/kong_dashboard.json"

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./prometheus:/etc/prometheus
    ports:
      - "9090:9090"
    networks:
      - kong-cluster-net

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    networks:
      - kong-cluster-net
    volumes:
      - grafana-storage:/var/lib/grafana  # ✅ 使用命名卷，避免权限问题
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    restart: always

  nginx-node1:
    image: nginx:alpine
    container_name: nginx-node1
    networks:
      - nginx-net
    ports:
      - "8081:80"
    volumes:
      - ./html/node1:/usr/share/nginx/html
    restart: always

  nginx-node2:
    image: nginx:alpine
    container_name: nginx-node2
    networks:
      - nginx-net
    ports:
      - "8082:80"
    volumes:
      - ./html/node2:/usr/share/nginx/html
    restart: always

  nginx-lb:
    image: nginx:alpine
    container_name: nginx-lb
    networks:
      - nginx-net
    ports:
      - "80:80"
    volumes:
      - ./nginx-config/nginx.conf:/etc/nginx/nginx.conf
    restart: always

networks:
  kong-cluster-net:
  nginx-net:

volumes:
  grafana-storage:

